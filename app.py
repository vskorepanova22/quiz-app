from flask import Flask, render_template, request
from flask_socketio import SocketIO, emit
import time
import threading
import os
import random

app = Flask(__name__)
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'quiz_secret_key_2024')

socketio = SocketIO(app, cors_allowed_origins="*", async_mode='threading')

# –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —Å —Ä–∞–∑–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞ –æ—Ç–≤–µ—Ç
questions = [
    {
        'id': 1,
        'question': '–°—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?',
        'options': ['–õ–æ–Ω–¥–æ–Ω', '–ü–∞—Ä–∏–∂', '–ë–µ—Ä–ª–∏–Ω', '–ú–∞–¥—Ä–∏–¥'],
        'correct_answer': 1,
        'time_limit': 10  # —Å–µ–∫—É–Ω–¥
    },
    {
        'id': 2,
        'question': '2 * 3 = ?',
        'options': ['3', '2', '5', '6'],
        'correct_answer': 3,
        'time_limit': 10  # —Å–µ–∫—É–Ω–¥
    },
    {
        'id': 3,
        'question': '–°–∞–º–∞—è –±–æ–ª—å—à–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã?',
        'options': ['–Æ–ø–∏—Ç–µ—Ä', '–ó–µ–º–ª—è', '–°–∞—Ç—É—Ä–Ω', '–ú–∞—Ä—Å'],
        'correct_answer': 0,
        'time_limit': 10  # —Å–µ–∫—É–Ω–¥
    },
    {
        'id': 4,
        'question': '–ê–≤—Ç–æ—Ä "–í–æ–π–Ω—ã –∏ –º–∏—Ä–∞"?',
        'options': ['–î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π', '–¢–æ–ª—Å—Ç–æ–π', '–ß–µ—Ö–æ–≤', '–¢—É—Ä–≥–µ–Ω–µ–≤'],
        'correct_answer': 1,
        'time_limit': 10  # —Å–µ–∫—É–Ω–¥
    },
    {
        'id': 5,
        'question': '–ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç –∫–æ–¥: print("5" * 3)?',
        'options': ['[5,5,5]', 'Error', '555', '15'],
        'correct_answer': 2,
        'time_limit': 12  # —Å–µ–∫—É–Ω–¥
    },
    {
        'id': 5,
        'question': '–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –º–æ–¥–µ–ª—å —Ä–µ–≥—Ä–µ—Å—Å–∏–∏?',
        'options': ['–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç—ã', '–ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–µ –≤–µ–ª–∏—á–∏–Ω—ã', '–°–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ', '–í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–¥–∞—á–∞—Ö —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ, –∞ –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö - —Å—Ç—Ä–æ–∏—Ç –¥–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π'],
        'correct_answer': 1,
        'time_limit': 12  # —Å–µ–∫—É–Ω–¥
    }

]


class QuizManager:
    def __init__(self):
        self.current_question_index = -1 # —á—Ç–æ–±—ã –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –±—ã–ª
        self.quiz_active = False
        self.time_left = 0
        self.timer_thread = None
        self.players = {}
        self.scores = {}
        self.answers = {}
        self.timer_active = False
        self.question_start_time = None
        self.waiting_for_admin = True  # –û–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        self.player_positions = {}  # –ü–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–æ–≤ –≤ –æ–±–ª–∞–∫–µ

    def start_quiz(self):
        if not self.quiz_active and self.waiting_for_admin:
            self.quiz_active = True
            self.waiting_for_admin = False
            self.current_question_index = 0 # –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            # self.players = {}
            # self.scores = {}
            self.answers = {} # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            print("üé¨ –•–∞–∫–∞—Ç–æ–Ω –æ—Ç –í–µ—Ä–æ–Ω–∏–∫–∏ –Ω–∞—á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
            socketio.emit('quiz_started')
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É
            self.current_question_index = 0
            self.start_question()


    def start_question(self):
        if self.current_question_index < len(questions):
            self.answers = {}
            question_data = questions[self.current_question_index]
            self.time_left = question_data['time_limit']
            self.timer_active = True
            self.question_start_time = time.time()

            socketio.emit('new_question', {
                'question_id': question_data['id'],
                'question': question_data['question'],
                'options': question_data['options'],
                'question_number': self.current_question_index + 1,
                'total_questions': len(questions),
                'time_left': self.time_left,
                'time_limit': question_data['time_limit']
            })

            print(
                f"üöÄ –í–æ–ø—Ä–æ—Å {self.current_question_index + 1} –Ω–∞—á–∞—Ç: {question_data['question']} (–≤—Ä–µ–º—è: {self.time_left}—Å)")
            self.start_timer()

    def start_timer(self):
        def countdown():
            for i in range(self.time_left, -1, -1):
                if not self.timer_active:
                    break
                self.time_left = i
                socketio.emit('timer_update', {'time_left': self.time_left})
                time.sleep(1)

            if self.timer_active:
                print(f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {self.current_question_index + 1}")
                self.end_question()

        self.timer_thread = threading.Thread(target=countdown)
        self.timer_thread.daemon = True
        self.timer_thread.start()

    def end_question(self):
        self.timer_active = False

        question = questions[self.current_question_index]
        correct_answer = question['correct_answer']

        # –î–ï–¢–ê–õ–¨–ù–ê–Ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–≤–µ—Ç–∞–º
        correct_answers_count = 0
        incorrect_answers_count = 0
        answer_details = []

        for player_id, answer in self.answers.items():
            player_name = self.players[player_id]['name']
            is_correct = (answer == correct_answer)

            if is_correct:
                correct_answers_count += 1
            else:
                incorrect_answers_count += 1

            answer_details.append({
                'name': player_name,
                'answer': answer,
                'correct': is_correct,
                'score': self.scores.get(player_id, 0)
            })

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) –∏–ª–∏ –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏
        answer_details.sort(key=lambda x: (x['correct'], x['score']), reverse=True)

        results = {
            'total_players': len(self.players),
            'answered_players': len(self.answers),
            'correct_answers': correct_answers_count,
            'incorrect_answers': incorrect_answers_count,
            'correct_answer': correct_answer,
            'correct_answer_text': question['options'][correct_answer],
            'question_number': self.current_question_index + 1,
            'answer_details': answer_details[:10],  # –¢–æ–ø 10 –æ—Ç–≤–µ—Ç–æ–≤
            'current_rankings': self.get_current_rankings()  # –¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥
        }

        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ–ø—Ä–æ—Å–∞ {self.current_question_index + 1}:")
        print(f"   –ò–≥—Ä–æ–∫–æ–≤ –æ—Ç–≤–µ—Ç–∏–ª–æ: {len(self.answers)}/{len(self.players)}")
        print(f"   –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers_count}")
        print(f"   –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {incorrect_answers_count}")

        # –ü–µ—á–∞—Ç–∞–µ–º —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤
        print("   –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:")
        for i, player in enumerate(results['current_rankings'][:3]):
            print(f"      {i + 1}. {player['name']} - {player['score']} –±–∞–ª–ª–æ–≤")

        socketio.emit('question_results', results)

        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º...")
        time.sleep(3)

        self.current_question_index += 1
        if self.current_question_index < len(questions):
            self.start_question()
        else:
            self.end_quiz()

    def get_current_rankings(self): # –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤"""
        rankings = []
        for player_id, player_data in self.players.items():
            rankings.append({
                'name': player_data['name'],
                'score': self.scores.get(player_id, 0),
                'correct_answers': player_data.get('correct_answers', 0)
            })

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –±–∞–ª–ª–æ–≤
        rankings.sort(key=lambda x: x['score'], reverse=True)
        return rankings

    def end_quiz(self):
        self.quiz_active = False
        self.timer_active = False
        self.waiting_for_admin = True  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã

        rankings = []
        for player_id, player_data in self.players.items():
            rankings.append({
                'name': player_data['name'],
                'score': self.scores.get(player_id, 0),
                'correct_answers': player_data.get('correct_answers', 0)
            })

        rankings.sort(key=lambda x: x['score'], reverse=True)

        final_results = {
            'rankings': rankings[:10],
            'winners': rankings[:3] if len(rankings) >= 3 else rankings,
            'total_players': len(self.players),
            'total_questions': len(questions)
        }

        socketio.emit('quiz_finished', final_results)

        print("üéâ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìà –£—á–∞—Å—Ç–≤–æ–≤–∞–ª–æ –∏–≥—Ä–æ–∫–æ–≤: {len(self.players)}")
        print("üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:")
        for i, winner in enumerate(final_results['winners']):
            print(f"   {i + 1}. {winner['name']} - {winner['score']} –±–∞–ª–ª–æ–≤")

    def add_player(self, player_id, name):
        if player_id not in self.players:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –æ–±–ª–∞–∫–∞ –∏–º–µ–Ω
            position = {
                'x': random.randint(10, 90),  # –ü—Ä–æ—Ü–µ–Ω—Ç—ã –æ—Ç —à–∏—Ä–∏–Ω—ã
                'y': random.randint(10, 90),  # –ü—Ä–æ—Ü–µ–Ω—Ç—ã –æ—Ç –≤—ã—Å–æ—Ç—ã
                'size': random.randint(14, 24)  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
            }

            self.players[player_id] = {
                'name': name,
                'correct_answers': 0,
                'position': position
            }
            self.scores[player_id] = 0
            self.player_positions[player_id] = position

            print(f"üë§ –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫: {name} (–≤—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(self.players)})")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–±–ª–∞–∫–æ –∏–º–µ–Ω –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
            self.update_name_cloud()

    def update_name_cloud(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–±–ª–∞–∫–æ –∏–º–µ–Ω –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
        name_cloud = []
        for player_id, player_data in self.players.items():
            name_cloud.append({
                'name': player_data['name'],
                'x': player_data['position']['x'],
                'y': player_data['position']['y'],
                'size': player_data['position']['size']
            })

        socketio.emit('name_cloud_update', {'players': name_cloud})

    def submit_answer(self, player_id, question_id, answer_index): #–æ—Ç–≤–µ—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if (player_id in self.players and
                self.timer_active and
                player_id not in self.answers):

            self.answers[player_id] = answer_index

            current_question = questions[self.current_question_index]
            response_time = time.time() - self.question_start_time

            # –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
            correct = (answer_index == current_question['correct_answer'])

            if correct:
                # –ë–æ–Ω—É—Å –∑–∞ —Å–∫–æ—Ä–æ—Å—Ç—å: —á–µ–º –±—ã—Å—Ç—Ä–µ–µ –æ—Ç–≤–µ—Ç, —Ç–µ–º –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤
                max_bonus = 10
                time_bonus = max(1, max_bonus - int(response_time))
                self.scores[player_id] += time_bonus
                self.players[player_id]['correct_answers'] += 1
                print(
                    f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç {self.players[player_id]['name']} (+{time_bonus} –±–∞–ª–ª–æ–≤, –≤—Ä–µ–º—è: {response_time:.1f}—Å)")
            else:
                print(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç {self.players[player_id]['name']}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.players[player_id]['last_answer_correct'] = correct
            self.players[player_id]['last_response_time'] = response_time

            # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∏–≥—Ä–æ–∫—É
            socketio.emit('answer_processed', {
                'correct': correct,
                'player_score': self.scores[player_id]
            }, room=player_id)


quiz_manager = QuizManager()

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/admin')
def admin():
    return render_template('admin.html')


@socketio.on('connect')
def handle_connect():
    print(f'üîå –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {request.sid}')
    emit('connected', {'status': 'ok'})


@socketio.on('disconnect')
def handle_disconnect():
    print(f'üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ: {request.sid}')
    # –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –æ–±–ª–∞–∫–∞ –∏–º–µ–Ω –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
    if request.sid in quiz_manager.players:
        del quiz_manager.players[request.sid]
        del quiz_manager.player_positions[request.sid]
        quiz_manager.update_name_cloud()


@socketio.on('join_quiz')
def handle_join(data):
    name = data.get('name', '–ê–Ω–æ–Ω–∏–º').strip()
    if not name:
        name = '–ê–Ω–æ–Ω–∏–º'

    quiz_manager.add_player(request.sid, name)
    emit('joined_success', {'name': name})

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    if quiz_manager.waiting_for_admin:
        emit('waiting_for_start', room=request.sid)
    elif quiz_manager.quiz_active:
        # –ï—Å–ª–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ —É–∂–µ –∏–¥–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        quiz_manager.start_question()


@socketio.on('submit_answer')
def handle_answer(data):
    question_id = data.get('question_id')
    answer_index = data.get('answer_index')

    print(f"üì® –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç {request.sid}: –≤–æ–ø—Ä–æ—Å {question_id}, –æ—Ç–≤–µ—Ç {answer_index}")

    quiz_manager.submit_answer(request.sid, question_id, answer_index)
    # emit('answer_received', {'status': 'ok'})


@socketio.on('start_quiz')
def handle_start():
    quiz_manager.start_quiz()
    print('üé¨ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–∞—á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!')


@socketio.on('force_next_question')
def handle_force_next():
    if quiz_manager.quiz_active:
        print('‚è≠Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É')
        quiz_manager.timer_active = False
        threading.Timer(0.1, quiz_manager.end_question).start()


if __name__ == '__main__':
    port = int(os.environ.get('PORT', 8080))
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    socketio.run(
        app,
        host='0.0.0.0',
        port=port,
        debug=False,
        allow_unsafe_werkzeug=True
    )


