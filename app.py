# import socket
# from pyngrok import ngrok, conf
# import threading
# from flask import Flask, render_template, request
# from flask_socketio import SocketIO, emit
# import time
#
#
# app = Flask(__name__)
# app.config['SECRET_KEY'] = 'quiz_secret_key_2024'
# socketio = SocketIO(app, cors_allowed_origins="*", async_mode='threading')
#
# # –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
# questions = [
#     {
#         'id': 1,
#         'question': '–°—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?',
#         'options': ['–õ–æ–Ω–¥–æ–Ω', '–ü–∞—Ä–∏–∂', '–ë–µ—Ä–ª–∏–Ω', '–ú–∞–¥—Ä–∏–¥'],
#         'correct_answer': 1
#     },
#     {
#         'id': 2,
#         'question': '2 + 2 = ?',
#         'options': ['3', '4', '5', '6'],
#         'correct_answer': 1
#     },
#     {
#         'id': 3,
#         'question': '–°–∞–º–∞—è –±–æ–ª—å—à–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã?',
#         'options': ['–ó–µ–º–ª—è', '–Æ–ø–∏—Ç–µ—Ä', '–°–∞—Ç—É—Ä–Ω', '–ú–∞—Ä—Å'],
#         'correct_answer': 1
#     },
#     {
#         'id': 4,
#         'question': '–ê–≤—Ç–æ—Ä "–í–æ–π–Ω—ã –∏ –º–∏—Ä–∞"?',
#         'options': ['–î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π', '–¢–æ–ª—Å—Ç–æ–π', '–ß–µ—Ö–æ–≤', '–¢—É—Ä–≥–µ–Ω–µ–≤'],
#         'correct_answer': 1
#     },
#     {
#         'id': 5,
#         'question': '–•–∏–º–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞ –≤–æ–¥—ã?',
#         'options': ['CO2', 'H2O', 'O2', 'NaCl'],
#         'correct_answer': 1
#     }
# ]
#
#
# class QuizManager:
#     def __init__(self):
#         self.current_question_index = 0
#         self.quiz_active = False
#         self.time_left = 30
#         self.timer_thread = None
#         self.players = {}
#         self.scores = {}
#         self.answers = {}
#         self.timer_active = False
#         self.question_start_time = None
#
#     def start_quiz(self):
#         if not self.quiz_active:
#             self.quiz_active = True
#             self.current_question_index = 0
#             self.players = {}
#             self.scores = {}
#             self.answers = {}
#             print("üé¨ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–∞—á–∞—Ç–∞!")
#             socketio.emit('quiz_started', broadcast=True)
#             self.start_question()
#
#     def start_question(self):
#         if self.current_question_index < len(questions):
#             self.answers = {}
#             self.time_left = 10  # –£–º–µ–Ω—å—à–∏–º –≤—Ä–µ–º—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
#             self.timer_active = True
#             self.question_start_time = time.time()
#
#             question_data = questions[self.current_question_index]
#
#             # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
#             socketio.emit('new_question', {
#                 'question_id': question_data['id'],
#                 'question': question_data['question'],
#                 'options': question_data['options'],
#                 'question_number': self.current_question_index + 1,
#                 'total_questions': len(questions),
#                 'time_left': self.time_left
#             })
#
#             print(f"üöÄ –í–æ–ø—Ä–æ—Å {self.current_question_index + 1} –Ω–∞—á–∞—Ç: {question_data['question']}")
#             self.start_timer()
#
#     def start_timer(self):
#         def countdown():
#             for i in range(self.time_left, -1, -1):
#                 if not self.timer_active:
#                     break
#                 self.time_left = i
#                 socketio.emit('timer_update', {'time_left': self.time_left})
#                 time.sleep(1)
#
#             if self.timer_active:
#                 print(f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {self.current_question_index + 1}")
#                 self.end_question()
#
#         self.timer_thread = threading.Thread(target=countdown)
#         self.timer_thread.daemon = True
#         self.timer_thread.start()
#
#     def end_question(self):
#         self.timer_active = False
#
#         # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
#         question = questions[self.current_question_index]
#         correct_answer = question['correct_answer']
#
#         results = {
#             'total_players': len(self.players),
#             'answered_players': len(self.answers),
#             'correct_answers': sum(1 for answer in self.answers.values()
#                                    if answer == correct_answer),
#             'correct_answer': correct_answer,
#             'correct_answer_text': question['options'][correct_answer],
#             'question_number': self.current_question_index + 1
#         }
#
#         print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ–ø—Ä–æ—Å–∞ {self.current_question_index + 1}:")
#         print(f"   –ò–≥—Ä–æ–∫–æ–≤ –æ—Ç–≤–µ—Ç–∏–ª–æ: {len(self.answers)}/{len(self.players)}")
#         print(f"   –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {results['correct_answers']}")
#
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
#         socketio.emit('question_results', results)
#
#         # –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º
#         print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º...")
#         time.sleep(3)
#
#         self.current_question_index += 1
#         if self.current_question_index < len(questions):
#             self.start_question()
#         else:
#             self.end_quiz()
#
#     def end_quiz(self):
#         self.quiz_active = False
#         self.timer_active = False
#
#         # –†–∞—Å—á–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
#         rankings = []
#         for player_id, player_data in self.players.items():
#             rankings.append({
#                 'name': player_data['name'],
#                 'score': self.scores.get(player_id, 0),
#                 'correct_answers': player_data.get('correct_answers', 0)
#             })
#
#         # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –±–∞–ª–ª–æ–≤
#         rankings.sort(key=lambda x: x['score'], reverse=True)
#
#         final_results = {
#             'rankings': rankings[:10],
#             'winners': rankings[:3] if len(rankings) >= 3 else rankings,
#             'total_players': len(self.players),
#             'total_questions': len(questions)
#         }
#
#         socketio.emit('quiz_finished', final_results)
#
#         print("üéâ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
#         print(f"üìà –£—á–∞—Å—Ç–≤–æ–≤–∞–ª–æ –∏–≥—Ä–æ–∫–æ–≤: {len(self.players)}")
#         print("üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:")
#         for i, winner in enumerate(final_results['winners']):
#             print(f"   {i + 1}. {winner['name']} - {winner['score']} –±–∞–ª–ª–æ–≤")
#
#     def add_player(self, player_id, name):
#         if player_id not in self.players:
#             self.players[player_id] = {
#                 'name': name,
#                 'correct_answers': 0
#             }
#             self.scores[player_id] = 0
#             print(f"üë§ –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫: {name} (–≤—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(self.players)})")
#
#             # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏–≥—Ä–æ–∫–µ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
#             if len(self.players) == 1 and not self.quiz_active:
#                 print("üëë –ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è - –∑–∞–ø—É—Å–∫–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...")
#                 threading.Timer(3.0, self.start_quiz).start()
#
#     def submit_answer(self, player_id, question_id, answer_index):
#         if (player_id in self.players and
#                 self.timer_active and
#                 player_id not in self.answers):
#
#             self.answers[player_id] = answer_index
#
#             current_question = questions[self.current_question_index]
#             response_time = time.time() - self.question_start_time
#
#             if answer_index == current_question['correct_answer']:
#                 # –ë–∞–ª–ª—ã: —á–µ–º –±—ã—Å—Ç—Ä–µ–µ –æ—Ç–≤–µ—Ç, —Ç–µ–º –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤
#                 time_bonus = max(1, 10 - int(response_time))
#                 self.scores[player_id] += time_bonus
#                 self.players[player_id]['correct_answers'] += 1
#                 print(
#                     f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç {self.players[player_id]['name']} (+{time_bonus} –±–∞–ª–ª–æ–≤, –≤—Ä–µ–º—è: {response_time:.1f}—Å)")
#             else:
#                 print(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç {self.players[player_id]['name']}")
#
#
# quiz_manager = QuizManager()
#
#
# @app.route('/')
# def index():
#     return render_template('index.html')
#
#
# @app.route('/admin')
# def admin():
#     return render_template('admin.html')
#
#
# @socketio.on('connect')
# def handle_connect():
#     print(f'üîå –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {request.sid}')
#     emit('connected', {'status': 'ok'})
#
#
# @socketio.on('disconnect')
# def handle_disconnect():
#     print(f'üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ: {request.sid}')
#
#
# @socketio.on('join_quiz')
# def handle_join(data):
#     name = data.get('name', '–ê–Ω–æ–Ω–∏–º').strip()
#     if not name:
#         name = '–ê–Ω–æ–Ω–∏–º'
#
#     quiz_manager.add_player(request.sid, name)
#     emit('joined_success', {'name': name})
#
#     if quiz_manager.quiz_active:
#         quiz_manager.start_question()
#
#
# @socketio.on('submit_answer')
# def handle_answer(data):
#     question_id = data.get('question_id')
#     answer_index = data.get('answer_index')
#
#     quiz_manager.submit_answer(request.sid, question_id, answer_index)
#     emit('answer_received', {'status': 'ok'})
#
#
# @socketio.on('start_quiz')
# def handle_start():
#     quiz_manager.start_quiz()
#     print('üé¨ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–∞—á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!')
#
#
# @socketio.on('force_next_question')
# def handle_force_next():
#     if quiz_manager.quiz_active:
#         print('‚è≠Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É')
#         quiz_manager.timer_active = False
#         # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
#         threading.Timer(0.1, quiz_manager.end_question).start()
#
#
# def get_local_ip():
#     """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π IP-–∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ —Å–µ—Ç–∏"""
#     try:
#         # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –Ω–∞—à IP
#         with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
#             s.connect(("8.8.8.8", 80))
#             return s.getsockname()[0]
#     except:
#         return "127.0.0.1"
#
#
# if __name__ == '__main__':
#     local_ip = get_local_ip()
#     port = 8080
#
#     print("=" * 70)
#     print("üéØ –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê –í–ò–ö–¢–û–†–ò–ù–´")
#     print("=" * 70)
#     print("üìç –õ–æ–∫–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø:")
#     print(f"   üì± http://localhost:{port}")
#     print(f"   ‚öôÔ∏è  http://localhost:{port}/admin")
#     print("")
#     print("üìç –°–µ—Ç–µ–≤–æ–π –¥–æ—Å—Ç—É–ø (–¥–ª—è –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤):")
#     print(f"   üì± http://{local_ip}:{port}")
#     print(f"   ‚öôÔ∏è  http://{local_ip}:{port}/admin")
#     print("")
#     print("üí° –î–ª—è –¥–æ—Å—Ç—É–ø–∞ —Å –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤:")
#     print("   1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –æ–¥–Ω–æ–π —Å–µ—Ç–∏ Wi-Fi")
#     print("   2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥—Ä–µ—Å –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ '–°–µ—Ç–µ–≤–æ–π –¥–æ—Å—Ç—É–ø'")
#     print("   3. –†–∞–∑—Ä–µ—à–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–µ Windows")
#     print("=" * 70)
#
#     try:
#         socketio.run(
#             app,
#             host='0.0.0.0',  # –ü—Ä–∏–Ω–∏–º–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–æ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
#             port=port,
#             debug=True,
#             allow_unsafe_werkzeug=True
#         )
#     except Exception as e:
#         print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
#         print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5000, 8000, 8081)")
#
# –í–∞—Ä–∏–∞–Ω—Ç2 —Å NGROK
# from flask import Flask, render_template, request
# from flask_socketio import SocketIO, emit
# import time
# import threading
# import socket
# import sys
# import requests
# import json
# import os
# import subprocess
#
# try:
#     from pyngrok import ngrok, conf
#     NGROK_AVAILABLE = True
# except ImportError:
#     NGROK_AVAILABLE = False
#
# app = Flask(__name__)
# app.config['SECRET_KEY'] = 'quiz_secret_key_2024'
# socketio = SocketIO(app, cors_allowed_origins="*", async_mode='threading')
#
# # –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
# questions = [
#     {
#         'id': 1,
#         'question': '–°—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?',
#         'options': ['–õ–æ–Ω–¥–æ–Ω', '–ü–∞—Ä–∏–∂', '–ë–µ—Ä–ª–∏–Ω', '–ú–∞–¥—Ä–∏–¥'],
#         'correct_answer': 1
#     },
#     {
#         'id': 2,
#         'question': '2 + 2 = ?',
#         'options': ['3', '4', '5', '6'],
#         'correct_answer': 1
#     },
#     {
#         'id': 3,
#         'question': '–°–∞–º–∞—è –±–æ–ª—å—à–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã?',
#         'options': ['–ó–µ–º–ª—è', '–Æ–ø–∏—Ç–µ—Ä', '–°–∞—Ç—É—Ä–Ω', '–ú–∞—Ä—Å'],
#         'correct_answer': 1
#     },
#     {
#         'id': 4,
#         'question': '–ê–≤—Ç–æ—Ä "–í–æ–π–Ω—ã –∏ –º–∏—Ä–∞"?',
#         'options': ['–î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π', '–¢–æ–ª—Å—Ç–æ–π', '–ß–µ—Ö–æ–≤', '–¢—É—Ä–≥–µ–Ω–µ–≤'],
#         'correct_answer': 1
#     },
#     {
#         'id': 5,
#         'question': '–•–∏–º–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞ –≤–æ–¥—ã?',
#         'options': ['CO2', 'H2O', 'O2', 'NaCl'],
#         'correct_answer': 1
#     }
# ]
#
#
# class QuizManager:
#     def __init__(self):
#         self.current_question_index = 0
#         self.quiz_active = False
#         self.time_left = 30
#         self.timer_thread = None
#         self.players = {}
#         self.scores = {}
#         self.answers = {}
#         self.timer_active = False
#         self.question_start_time = None
#
#     def start_quiz(self):
#         if not self.quiz_active:
#             self.quiz_active = True
#             self.current_question_index = 0
#             self.players = {}
#             self.scores = {}
#             self.answers = {}
#             print("üé¨ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–∞—á–∞—Ç–∞!")
#             socketio.emit('quiz_started', broadcast=True)
#             self.start_question()
#
#     def start_question(self):
#         if self.current_question_index < len(questions):
#             self.answers = {}
#             self.time_left = 15  # –£–≤–µ–ª–∏—á–∏–º –≤—Ä–µ–º—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
#             self.timer_active = True
#             self.question_start_time = time.time()
#
#             question_data = questions[self.current_question_index]
#
#             socketio.emit('new_question', {
#                 'question_id': question_data['id'],
#                 'question': question_data['question'],
#                 'options': question_data['options'],
#                 'question_number': self.current_question_index + 1,
#                 'total_questions': len(questions),
#                 'time_left': self.time_left
#             })
#
#             print(f"üöÄ –í–æ–ø—Ä–æ—Å {self.current_question_index + 1} –Ω–∞—á–∞—Ç: {question_data['question']}")
#             self.start_timer()
#
#     def start_timer(self):
#         def countdown():
#             for i in range(self.time_left, -1, -1):
#                 if not self.timer_active:
#                     break
#                 self.time_left = i
#                 socketio.emit('timer_update', {'time_left': self.time_left})
#                 time.sleep(1)
#
#             if self.timer_active:
#                 print(f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {self.current_question_index + 1}")
#                 self.end_question()
#
#         self.timer_thread = threading.Thread(target=countdown)
#         self.timer_thread.daemon = True
#         self.timer_thread.start()
#
#     def end_question(self):
#         self.timer_active = False
#
#         question = questions[self.current_question_index]
#         correct_answer = question['correct_answer']
#
#         results = {
#             'total_players': len(self.players),
#             'answered_players': len(self.answers),
#             'correct_answers': sum(1 for answer in self.answers.values()
#                                    if answer == correct_answer),
#             'correct_answer': correct_answer,
#             'correct_answer_text': question['options'][correct_answer],
#             'question_number': self.current_question_index + 1
#         }
#
#         print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ–ø—Ä–æ—Å–∞ {self.current_question_index + 1}:")
#         print(f"   –ò–≥—Ä–æ–∫–æ–≤ –æ—Ç–≤–µ—Ç–∏–ª–æ: {len(self.answers)}/{len(self.players)}")
#         print(f"   –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {results['correct_answers']}")
#
#         socketio.emit('question_results', results)
#
#         print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º...")
#         time.sleep(5)
#
#         self.current_question_index += 1
#         if self.current_question_index < len(questions):
#             self.start_question()
#         else:
#             self.end_quiz()
#
#     def end_quiz(self):
#         self.quiz_active = False
#         self.timer_active = False
#
#         rankings = []
#         for player_id, player_data in self.players.items():
#             rankings.append({
#                 'name': player_data['name'],
#                 'score': self.scores.get(player_id, 0),
#                 'correct_answers': player_data.get('correct_answers', 0)
#             })
#
#         rankings.sort(key=lambda x: x['score'], reverse=True)
#
#         final_results = {
#             'rankings': rankings[:10],
#             'winners': rankings[:3] if len(rankings) >= 3 else rankings,
#             'total_players': len(self.players),
#             'total_questions': len(questions)
#         }
#
#         socketio.emit('quiz_finished', final_results)
#
#         print("üéâ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
#         print(f"üìà –£—á–∞—Å—Ç–≤–æ–≤–∞–ª–æ –∏–≥—Ä–æ–∫–æ–≤: {len(self.players)}")
#         print("üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:")
#         for i, winner in enumerate(final_results['winners']):
#             print(f"   {i + 1}. {winner['name']} - {winner['score']} –±–∞–ª–ª–æ–≤")
#
#     def add_player(self, player_id, name):
#         if player_id not in self.players:
#             self.players[player_id] = {
#                 'name': name,
#                 'correct_answers': 0
#             }
#             self.scores[player_id] = 0
#             print(f"üë§ –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫: {name} (–≤—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(self.players)})")
#
#             if len(self.players) == 1 and not self.quiz_active:
#                 print("üëë –ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è - –∑–∞–ø—É—Å–∫–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
#                 threading.Timer(5.0, self.start_quiz).start()
#
#     def submit_answer(self, player_id, question_id, answer_index):
#         if (player_id in self.players and
#                 self.timer_active and
#                 player_id not in self.answers):
#
#             self.answers[player_id] = answer_index
#
#             current_question = questions[self.current_question_index]
#             response_time = time.time() - self.question_start_time
#
#             if answer_index == current_question['correct_answer']:
#                 time_bonus = max(1, 10 - int(response_time))
#                 self.scores[player_id] += time_bonus
#                 self.players[player_id]['correct_answers'] += 1
#                 print(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç {self.players[player_id]['name']} (+{time_bonus} –±–∞–ª–ª–æ–≤)")
#
#
# quiz_manager = QuizManager()
#
#
# @app.route('/')
# def index():
#     return render_template('index.html')
#
#
# @app.route('/admin')
# def admin():
#     return render_template('admin.html')
#
#
# @socketio.on('connect')
# def handle_connect():
#     print(f'üîå –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {request.sid}')
#     emit('connected', {'status': 'ok'})
#
#
# @socketio.on('disconnect')
# def handle_disconnect():
#     print(f'üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ: {request.sid}')
#
#
# @socketio.on('join_quiz')
# def handle_join(data):
#     name = data.get('name', '–ê–Ω–æ–Ω–∏–º').strip()
#     if not name:
#         name = '–ê–Ω–æ–Ω–∏–º'
#
#     quiz_manager.add_player(request.sid, name)
#     emit('joined_success', {'name': name})
#
#     if quiz_manager.quiz_active:
#         quiz_manager.start_question()
#
#
# @socketio.on('submit_answer')
# def handle_answer(data):
#     question_id = data.get('question_id')
#     answer_index = data.get('answer_index')
#
#     quiz_manager.submit_answer(request.sid, question_id, answer_index)
#     emit('answer_received', {'status': 'ok'})
#
#
# @socketio.on('start_quiz')
# def handle_start():
#     quiz_manager.start_quiz()
#     print('üé¨ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–∞—á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!')
#
#
# @socketio.on('force_next_question')
# def handle_force_next():
#     if quiz_manager.quiz_active:
#         print('‚è≠Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É')
#         quiz_manager.timer_active = False
#         threading.Timer(0.1, quiz_manager.end_question).start()


# def get_local_ip():
#     """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π IP-–∞–¥—Ä–µ—Å"""
#     try:
#         with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
#             s.connect(("8.8.8.8", 80))
#             return s.getsockname()[0]
#     except:
#         return "127.0.0.1"
#
#
# def find_ngrok():
#     """–ò—â–µ—Ç ngrok.exe –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö"""
#     # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –∫ ngrok
#     possible_paths = [
#         "ngrok.exe",  # –í –ø–∞–ø–∫–µ —Å –ø—Ä–æ–µ–∫—Ç–æ–º
#         "D:\\NGROK\\ngrok.exe",  # –í–∞—à–∞ –ø–∞–ø–∫–∞
#         "D:\\NGROK\\ngrok-stable-windows-amd64\\ngrok.exe",  # –ï—Å–ª–∏ –≤ –∞—Ä—Ö–∏–≤–µ
#         os.path.join(os.getcwd(), "ngrok.exe"),  # –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞
#     ]
#
#     for path in possible_paths:
#         if os.path.exists(path):
#             print(f"‚úÖ –ù–∞–π–¥–µ–Ω ngrok: {path}")
#             return path
#
#     print("‚ùå ngrok.exe –Ω–µ –Ω–∞–π–¥–µ–Ω!")
#     print("üí° –†–∞–∑–º–µ—Å—Ç–∏—Ç–µ ngrok.exe –≤ –æ–¥–Ω–æ–π –∏–∑ —ç—Ç–∏—Ö –ø–∞–ø–æ–∫:")
#     for path in possible_paths:
#         print(f"   - {path}")
#     return None
#
#
# def start_ngrok_manual(port):
#     """–ó–∞–ø—É—Å–∫–∞–µ—Ç ngrok –≤—Ä—É—á–Ω—É—é"""
#     try:
#         print("üåê –ü–æ–∏—Å–∫ ngrok...")
#
#         # –ò—â–µ–º ngrok
#         ngrok_path = find_ngrok()
#         if not ngrok_path:
#             return None
#
#         print(f"üöÄ –ó–∞–ø—É—Å–∫ ngrok: {ngrok_path}")
#
#         # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã ngrok
#         try:
#             subprocess.run(['taskkill', '/f', '/im', 'ngrok.exe'],
#                            capture_output=True, timeout=5)
#             time.sleep(2)
#         except:
#             pass
#
#         # –ó–∞–ø—É—Å–∫–∞–µ–º ngrok
#         ngrok_process = subprocess.Popen(
#             [ngrok_path, 'http', str(port), '--log=stdout'],
#             stdout=subprocess.PIPE,
#             stderr=subprocess.PIPE,
#             text=True,
#             bufsize=1,
#             universal_newlines=True
#         )
#
#         # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –∏ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å URL –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
#         print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ ngrok...")
#
#         public_url = None
#         for attempt in range(10):  # 10 –ø–æ–ø—ã—Ç–æ–∫ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 2 —Å–µ–∫—É–Ω–¥—ã
#             time.sleep(2)
#             print(f"   –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/10 –ø–æ–ª—É—á–∏—Ç—å URL...")
#
#             try:
#                 response = requests.get("http://localhost:4040/api/tunnels", timeout=5)
#                 if response.status_code == 200:
#                     data = response.json()
#                     tunnels = data.get('tunnels', [])
#                     for tunnel in tunnels:
#                         if tunnel.get('proto') == 'https':
#                             public_url = tunnel.get('public_url')
#                             break
#
#                     if public_url:
#                         break
#             except:
#                 pass
#
#         if public_url:
#             print("=" * 70)
#             print("üåê –î–û–°–¢–£–ü –ò–ó –õ–Æ–ë–û–ô –°–ï–¢–ò –ò–ù–¢–ï–†–ù–ï–¢:")
#             print(f"   üì± –î–õ–Ø –ò–ì–†–û–ö–û–í: {public_url}")
#             print(f"   ‚öôÔ∏è  –î–õ–Ø –ê–î–ú–ò–ù–ê: {public_url}/admin")
#             print("=" * 70)
#             print("üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –∏–≥—Ä–æ–∫–∞–º!")
#             print("   –†–∞–±–æ—Ç–∞–µ—Ç –∏–∑ –ª—é–±–æ–π —Ç–æ—á–∫–∏ –º–∏—Ä–∞ üåç")
#             print("=" * 70)
#             return public_url
#         else:
#             print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç—å ngrok URL")
#             print("üí° –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:4040")
#             print("   —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤–∞—à –ø—É–±–ª–∏—á–Ω—ã–π URL")
#             return None
#
#     except Exception as e:
#         print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ngrok: {e}")
#         return None
#
#
# if __name__ == '__main__':
#     port = 8080
#     local_ip = get_local_ip()
#
#     print("=" * 70)
#     print("üéØ –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê –í–ò–ö–¢–û–†–ò–ù–´")
#     print("=" * 70)
#
#     # –ó–∞–ø—É—Å–∫–∞–µ–º ngrok
#     ngrok_url = start_ngrok_manual(port)
#
#     print("")
#     print("üìç –õ–û–ö–ê–õ–¨–ù–´–ô –î–û–°–¢–£–ü:")
#     print(f"   üì± http://localhost:{port}")
#     print(f"   üåê http://{local_ip}:{port}")
#     print("")
#     print("‚öôÔ∏è  –ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø:")
#     print(f"   http://localhost:{port}/admin")
#     print("")
#
#     if ngrok_url:
#         print("‚úÖ Ngrok —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
#     else:
#         print("üí° –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ngrok.exe –¥–æ—Å—Ç—É–ø–µ–Ω")
#
#     print("=" * 70)
#     print("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...")
#     print("=" * 70)
#
#     try:
#         socketio.run(
#             app,
#             host='0.0.0.0',
#             port=port,
#             debug=True,
#             allow_unsafe_werkzeug=True
#         )
#     except Exception as e:
#         print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
#


# E–©–ï –û–î–ù–ê –ß–ê–°–¢–¨ —Å IP
# def get_local_ip():
#     try:
#         with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
#             s.connect(("8.8.8.8", 80))
#             return s.getsockname()[0]
#     except:
#         return "127.0.0.1"
#
#
# def start_ngrok_with_auth(port, auth_token):
#     """–ó–∞–ø—É—Å–∫–∞–µ—Ç ngrok —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
#     try:
#         ngrok_path = "ngrok.exe"
#
#         if not os.path.exists(ngrok_path):
#             print("‚ùå ngrok.exe –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞")
#             return None
#
#         print("üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ngrok —Å –≤–∞—à–∏–º —Ç–æ–∫–µ–Ω–æ–º...")
#
#         # –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º authtoken
#         auth_process = subprocess.Popen(
#             [ngrok_path, 'authtoken', auth_token],
#             stdout=subprocess.PIPE,
#             stderr=subprocess.PIPE,
#             text=True
#         )
#         auth_process.wait()
#         print("‚úÖ –¢–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
#
#         # –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ–º —Ç—É–Ω–Ω–µ–ª—å
#         print("üåê –ó–∞–ø—É—Å–∫ ngrok —Ç—É–Ω–Ω–µ–ª—è...")
#         process = subprocess.Popen(
#             [ngrok_path, 'http', str(port)],
#             stdout=subprocess.PIPE,
#             stderr=subprocess.PIPE,
#             text=True,
#             bufsize=1
#         )
#
#         # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
#         print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ ngrok...")
#         ngrok_url = None
#
#         for i in range(20):
#             time.sleep(1)
#
#             # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤—ã–≤–æ–¥
#             try:
#                 line = process.stdout.readline()
#                 if line:
#                     line = line.strip()
#                     print(f"   Ngrok: {line}")
#
#                     # –ò—â–µ–º URL –≤ –≤—ã–≤–æ–¥–µ
#                     if '.ngrok.io' in line and 'Forwarding' in line:
#                         import re
#                         # –ò—â–µ–º URL –≤ —Å—Ç—Ä–æ–∫–µ –≤–∏–¥–∞: "Forwarding https://abc123.ngrok.io -> http://localhost:8080"
#                         urls = re.findall(r'https://[a-zA-Z0-9-]+\.ngrok\.io', line)
#                         if urls:
#                             ngrok_url = urls[0]
#                             print(f"‚úÖ Ngrok URL: {ngrok_url}")
#                             break
#             except:
#                 pass
#
#             if i % 5 == 0 and i > 0:
#                 print(f"   ...–æ–∂–∏–¥–∞–Ω–∏–µ ({i}/20 —Å–µ–∫—É–Ω–¥)")
#
#         if ngrok_url:
#             return ngrok_url
#         else:
#             print("‚ö†Ô∏è Ngrok –∑–∞–ø—É—â–µ–Ω, –Ω–æ URL –Ω–µ –ø–æ–ª—É—á–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
#             return "–û–ñ–ò–î–ê–ù–ò–ï_URL"
#
#     except Exception as e:
#         print(f"‚ùå –û—à–∏–±–∫–∞ ngrok: {e}")
#         return None
#
#
# def manual_ngrok_instructions(auth_token):
#     """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ ngrok"""
#     print(f"\nüîß –î–õ–Ø –í–ù–ï–®–ù–ï–ì–û –î–û–°–¢–£–ü–ê (Ngrok):")
#     print("1. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏")
#     print("2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–∞–ø–∫—É —Å –ø—Ä–æ–µ–∫—Ç–æ–º:")
#     print("   cd D:\\Python\\Project\\pythonProject2")
#     print("3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω:")
#     print(f"   ngrok.exe authtoken {auth_token}")
#     print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç—É–Ω–Ω–µ–ª—å:")
#     print("   ngrok.exe http 8080")
#     print("5. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ URL —Å .ngrok.io –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–≥—Ä–æ–∫–∞–º")
#
#
# if __name__ == '__main__':
#     port = 8080
#     local_ip = get_local_ip()
#
#     # –í–°–¢–ê–í–¨–¢–ï –í–ê–® –¢–û–ö–ï–ù –ó–î–ï–°–¨ ‚Üì
#     NGROK_AUTH_TOKEN = "33jcNwjvdTIkHXRLCRvjUyak3xh_6u2TGqMph5sAVSyW22prV"  # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –¢–û–ö–ï–ù
#
#     print("=" * 70)
#     print("üéØ –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê –í–ò–ö–¢–û–†–ò–ù–´ –° NGROK")
#     print("=" * 70)
#
#     # –ü—Ä–æ–±—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ ngrok
#     print("üåê –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ Ngrok —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π...")
#     ngrok_url = start_ngrok_with_auth(port, NGROK_AUTH_TOKEN)
#
#     print("")
#     if ngrok_url and ngrok_url != "–û–ñ–ò–î–ê–ù–ò–ï_URL":
#         print("üåê –î–û–°–¢–£–ü –ò–ó –õ–Æ–ë–û–ô –°–ï–¢–ò –ò–ù–¢–ï–†–ù–ï–¢:")
#         print(f"   üì± –î–õ–Ø –ò–ì–†–û–ö–û–í: {ngrok_url}")
#         print(f"   ‚öôÔ∏è  –î–õ–Ø –ê–î–ú–ò–ù–ê: {ngrok_url}/admin")
#         print("=" * 70)
#         print("üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –∏–≥—Ä–æ–∫–∞–º!")
#         print("   –†–∞–±–æ—Ç–∞–µ—Ç –∏–∑ –ª—é–±–æ–π —Ç–æ—á–∫–∏ –º–∏—Ä–∞ üåç")
#         print("=" * 70)
#     else:
#         print("üìç –õ–û–ö–ê–õ–¨–ù–´–ô –î–û–°–¢–£–ü (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≤–∞—à–µ–π Wi-Fi —Å–µ—Ç–∏):")
#         print(f"   üì± http://{local_ip}:{port}")
#         print("")
#         print("üåê –î–õ–Ø –î–û–°–¢–£–ü–ê –ò–ó –ò–ù–¢–ï–†–ù–ï–¢–ê:")
#         manual_ngrok_instructions(NGROK_AUTH_TOKEN)
#
#     print("")
#     print("‚öôÔ∏è  –ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø:")
#     print(f"   http://localhost:{port}/admin")
#     print("=" * 70)
#     print("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...")
#     print("=" * 70)
#
#     try:
#         socketio.run(
#             app,
#             host='0.0.0.0',
#             port=port,
#             debug=True,
#             allow_unsafe_werkzeug=True
#         )
#     except Exception as e:
#         print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")


# from flask import Flask, render_template, request
# from flask_socketio import SocketIO, emit
# import time
# import threading
# import socket
# import sys
# import os
# import subprocess
#
#
# app = Flask(__name__)
# app.config['SECRET_KEY'] = 'quiz_secret_key_2024'
# socketio = SocketIO(app, cors_allowed_origins="*", async_mode='threading')
#
# # –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
# questions = [
#     {
#         'id': 1,
#         'question': '–°—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?',
#         'options': ['–õ–æ–Ω–¥–æ–Ω', '–ü–∞—Ä–∏–∂', '–ë–µ—Ä–ª–∏–Ω', '–ú–∞–¥—Ä–∏–¥'],
#         'correct_answer': 1
#     },
#     {
#         'id': 2,
#         'question': '2 + 2 = ?',
#         'options': ['3', '4', '5', '6'],
#         'correct_answer': 1
#     },
#     {
#         'id': 3,
#         'question': '–°–∞–º–∞—è –±–æ–ª—å—à–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã?',
#         'options': ['–ó–µ–º–ª—è', '–Æ–ø–∏—Ç–µ—Ä', '–°–∞—Ç—É—Ä–Ω', '–ú–∞—Ä—Å'],
#         'correct_answer': 1
#     },
#     {
#         'id': 4,
#         'question': '–ê–≤—Ç–æ—Ä "–í–æ–π–Ω—ã –∏ –º–∏—Ä–∞"?',
#         'options': ['–î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π', '–¢–æ–ª—Å—Ç–æ–π', '–ß–µ—Ö–æ–≤', '–¢—É—Ä–≥–µ–Ω–µ–≤'],
#         'correct_answer': 1
#     },
#     {
#         'id': 5,
#         'question': '–•–∏–º–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞ –≤–æ–¥—ã?',
#         'options': ['CO2', 'H2O', 'O2', 'NaCl'],
#         'correct_answer': 1
#     }
# ]
#
#
# class QuizManager:
#     def __init__(self):
#         self.current_question_index = 0
#         self.quiz_active = False
#         self.time_left = 30
#         self.timer_thread = None
#         self.players = {}
#         self.scores = {}
#         self.answers = {}
#         self.timer_active = False
#         self.question_start_time = None
#
#     def start_quiz(self):
#         if not self.quiz_active:
#             self.quiz_active = True
#             self.current_question_index = 0
#             self.players = {}
#             self.scores = {}
#             self.answers = {}
#             print("üé¨ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–∞—á–∞—Ç–∞!")
#             socketio.emit('quiz_started', namespace='/')
#             self.start_question()
#
#     def start_question(self):
#         if self.current_question_index < len(questions):
#             self.answers = {}
#             self.time_left = 15
#             self.timer_active = True
#             self.question_start_time = time.time()
#
#             question_data = questions[self.current_question_index]
#
#             socketio.emit('new_question', {
#                 'question_id': question_data['id'],
#                 'question': question_data['question'],
#                 'options': question_data['options'],
#                 'question_number': self.current_question_index + 1,
#                 'total_questions': len(questions),
#                 'time_left': self.time_left
#             }, namespace='/')
#
#             print(f"üöÄ –í–æ–ø—Ä–æ—Å {self.current_question_index + 1} –Ω–∞—á–∞—Ç: {question_data['question']}")
#             self.start_timer()
#
#     def start_timer(self):
#         def countdown():
#             for i in range(self.time_left, -1, -1):
#                 if not self.timer_active:
#                     break
#                 self.time_left = i
#                 socketio.emit('timer_update', {'time_left': self.time_left}, namespace='/')
#                 time.sleep(1)
#
#             if self.timer_active:
#                 print(f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {self.current_question_index + 1}")
#                 self.end_question()
#
#         self.timer_thread = threading.Thread(target=countdown)
#         self.timer_thread.daemon = True
#         self.timer_thread.start()
#
#     def end_question(self):
#         self.timer_active = False
#
#         question = questions[self.current_question_index]
#         correct_answer = question['correct_answer']
#
#         results = {
#             'total_players': len(self.players),
#             'answered_players': len(self.answers),
#             'correct_answers': sum(1 for answer in self.answers.values()
#                                    if answer == correct_answer),
#             'correct_answer': correct_answer,
#             'correct_answer_text': question['options'][correct_answer],
#             'question_number': self.current_question_index + 1
#         }
#
#         print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ–ø—Ä–æ—Å–∞ {self.current_question_index + 1}:")
#         print(f"   –ò–≥—Ä–æ–∫–æ–≤ –æ—Ç–≤–µ—Ç–∏–ª–æ: {len(self.answers)}/{len(self.players)}")
#
#         socketio.emit('question_results', results, namespace='/')
#
#         print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º...")
#         time.sleep(5)
#
#         self.current_question_index += 1
#         if self.current_question_index < len(questions):
#             self.start_question()
#         else:
#             self.end_quiz()
#
#     def end_quiz(self):
#         self.quiz_active = False
#         self.timer_active = False
#
#         rankings = []
#         for player_id, player_data in self.players.items():
#             rankings.append({
#                 'name': player_data['name'],
#                 'score': self.scores.get(player_id, 0),
#                 'correct_answers': player_data.get('correct_answers', 0)
#             })
#
#         rankings.sort(key=lambda x: x['score'], reverse=True)
#
#         final_results = {
#             'rankings': rankings[:10],
#             'winners': rankings[:3] if len(rankings) >= 3 else rankings,
#             'total_players': len(self.players),
#             'total_questions': len(questions)
#         }
#
#         socketio.emit('quiz_finished', final_results, namespace='/')
#
#         print("üéâ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
#         print(f"üìà –£—á–∞—Å—Ç–≤–æ–≤–∞–ª–æ –∏–≥—Ä–æ–∫–æ–≤: {len(self.players)}")
#
#     def add_player(self, player_id, name):
#         if player_id not in self.players:
#             self.players[player_id] = {
#                 'name': name,
#                 'correct_answers': 0
#             }
#             self.scores[player_id] = 0
#             print(f"üë§ –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫: {name} (–≤—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(self.players)})")
#
#             if len(self.players) == 1 and not self.quiz_active:
#                 print("üëë –ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è - –∑–∞–ø—É—Å–∫–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
#                 threading.Timer(5.0, self.start_quiz).start()
#
#     def submit_answer(self, player_id, question_id, answer_index):
#         if (player_id in self.players and
#                 self.timer_active and
#                 player_id not in self.answers):
#
#             self.answers[player_id] = answer_index
#
#             current_question = questions[self.current_question_index]
#             response_time = time.time() - self.question_start_time
#
#             if answer_index == current_question['correct_answer']:
#                 time_bonus = max(1, 10 - int(response_time))
#                 self.scores[player_id] += time_bonus
#                 self.players[player_id]['correct_answers'] += 1
#                 print(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç {self.players[player_id]['name']} (+{time_bonus} –±–∞–ª–ª–æ–≤)")
#
#
# quiz_manager = QuizManager()
#
#
# @app.route('/')
# def index():
#     return render_template('index.html')
#
#
# @app.route('/admin')
# def admin():
#     return render_template('admin.html')
#
#
# @socketio.on('connect')
# def handle_connect():
#     print(f'üîå –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {request.sid}')
#     emit('connected', {'status': 'ok'})
#
#
# @socketio.on('disconnect')
# def handle_disconnect():
#     print(f'üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ: {request.sid}')
#
#
# @socketio.on('join_quiz')
# def handle_join(data):
#     name = data.get('name', '–ê–Ω–æ–Ω–∏–º').strip()
#     if not name:
#         name = '–ê–Ω–æ–Ω–∏–º'
#
#     quiz_manager.add_player(request.sid, name)
#     emit('joined_success', {'name': name})
#
#     if quiz_manager.quiz_active:
#         quiz_manager.start_question()
#
#
# @socketio.on('submit_answer')
# def handle_answer(data):
#     question_id = data.get('question_id')
#     answer_index = data.get('answer_index')
#
#     quiz_manager.submit_answer(request.sid, question_id, answer_index)
#     emit('answer_received', {'status': 'ok'})
#
#
# @socketio.on('start_quiz')
# def handle_start():
#     quiz_manager.start_quiz()
#     print('üé¨ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–∞—á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!')
#
#
# @socketio.on('force_next_question')
# def handle_force_next():
#     if quiz_manager.quiz_active:
#         print('‚è≠Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É')
#         quiz_manager.timer_active = False
#         threading.Timer(0.1, quiz_manager.end_question).start()
#
#
# def get_local_ip():
#     try:
#         with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
#             s.connect(("8.8.8.8", 80))
#             return s.getsockname()[0]
#     except:
#         return "127.0.0.1"
#
#
# def start_serveo_manual(port):
#     """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ Serveo"""
#     print("üåê –î–õ–Ø –í–ù–ï–®–ù–ï–ì–û –î–û–°–¢–£–ü–ê:")
#     print("1. –û—Ç–∫—Ä–æ–π—Ç–µ –ù–û–í–û–ï –æ–∫–Ω–æ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏")
#     print("2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:")
#     print(f"   ssh -o StrictHostKeyChecking=no -R 80:localhost:{port} serveo.net")
#     print("3. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ—è–≤–ª–µ–Ω–∏—è URL —Å 'serveo.net'")
#     print("4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç URL –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–≥—Ä–æ–∫–∞–º")
#     print("5. –ù–ï –ó–ê–ö–†–´–í–ê–ô–¢–ï –æ–∫–Ω–æ —Å Serveo!")
#     return None
#
#
# if __name__ == '__main__':
#     port = 8080
#     local_ip = get_local_ip()
#
#     print("=" * 70)
#     print("üéØ –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê –í–ò–ö–¢–û–†–ò–ù–´")
#     print("=" * 70)
#
#     print("üìç –õ–û–ö–ê–õ–¨–ù–´–ô –î–û–°–¢–£–ü (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≤–∞—à–µ–π Wi-Fi —Å–µ—Ç–∏):")
#     print(f"   üì± http://{local_ip}:{port}")
#     print("")
#
#     # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è Serveo
#     serveo_url = start_serveo_manual(port)
#
#     print("")
#     print("‚öôÔ∏è  –ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø:")
#     print(f"   http://localhost:{port}/admin")
#     print("=" * 70)
#     print("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...")
#     print("=" * 70)
#
#     try:
#         socketio.run(
#             app,
#             host='0.0.0.0',
#             port=port,
#             debug=True,
#             allow_unsafe_werkzeug=True
#         )
#     except Exception as e:
#         print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")


############################################################
# if __name__ == '__main__':
#     port = 8080
#     local_ip = get_local_ip()
#
#     print("=" * 70)
#     print("üéØ –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê –í–ò–ö–¢–û–†–ò–ù–´")
#     print("=" * 70)
#
#     print("üìç –õ–û–ö–ê–õ–¨–ù–´–ô –î–û–°–¢–£–ü:")
#     print(f"   üì± http://{local_ip}:{port}")
#     print("")
#     print("üåê Serveo URL –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞:")
#     print("https://26ac27cf3b427c98febb717a9688685b.serveo.net/")
#     print("")
#     print("‚öôÔ∏è  –ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø:")
#     print(f"   http://localhost:{port}/admin")
#     print("=" * 70)
#
#     # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö
#     print("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –≤—Å–µ—Ö —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö...")
#     print("=" * 70)
#
#     try:
#         socketio.run(
#             app,
#             host='0.0.0.0',  # –í–∞–∂–Ω–æ: –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–æ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
#             port=port,
#             debug=True,
#             use_reloader=False,  # –í–∞–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É,
#             allow_unsafe_werkzeug = True
#         )
#     except Exception as e:
#         print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")



#########################################LOCALTUNNEL
# from flask import Flask, render_template, request
# from flask_socketio import SocketIO, emit
# import time
# import threading
# import socket
# import sys
# import requests
# import json
# import os
# import subprocess
#
# app = Flask(__name__)
# app.config['SECRET_KEY'] = 'quiz_secret_key_2024'
# socketio = SocketIO(app, cors_allowed_origins="*", async_mode='threading')
#
# # –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
# questions = [
#     {
#         'id': 1,
#         'question': '–°—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?',
#         'options': ['–õ–æ–Ω–¥–æ–Ω', '–ü–∞—Ä–∏–∂', '–ë–µ—Ä–ª–∏–Ω', '–ú–∞–¥—Ä–∏–¥'],
#         'correct_answer': 1
#     },
#     {
#         'id': 2,
#         'question': '2 + 2 = ?',
#         'options': ['3', '4', '5', '6'],
#         'correct_answer': 1
#     },
#     {
#         'id': 3,
#         'question': '–°–∞–º–∞—è –±–æ–ª—å—à–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã?',
#         'options': ['–ó–µ–º–ª—è', '–Æ–ø–∏—Ç–µ—Ä', '–°–∞—Ç—É—Ä–Ω', '–ú–∞—Ä—Å'],
#         'correct_answer': 1
#     },
#     {
#         'id': 4,
#         'question': '–ê–≤—Ç–æ—Ä "–í–æ–π–Ω—ã –∏ –º–∏—Ä–∞"?',
#         'options': ['–î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π', '–¢–æ–ª—Å—Ç–æ–π', '–ß–µ—Ö–æ–≤', '–¢—É—Ä–≥–µ–Ω–µ–≤'],
#         'correct_answer': 1
#     },
#     {
#         'id': 5,
#         'question': '–•–∏–º–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞ –≤–æ–¥—ã?',
#         'options': ['CO2', 'H2O', 'O2', 'NaCl'],
#         'correct_answer': 1
#     }
# ]
#
#
# class QuizManager:
#     def __init__(self):
#         self.current_question_index = 0
#         self.quiz_active = False
#         self.time_left = 30
#         self.timer_thread = None
#         self.players = {}
#         self.scores = {}
#         self.answers = {}
#         self.timer_active = False
#         self.question_start_time = None
#
#     def start_quiz(self):
#         if not self.quiz_active:
#             self.quiz_active = True
#             self.current_question_index = 0
#             self.players = {}
#             self.scores = {}
#             self.answers = {}
#             print("üé¨ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–∞—á–∞—Ç–∞!")
#             socketio.emit('quiz_started', broadcast=True)
#             self.start_question()
#
#     def start_question(self):
#         if self.current_question_index < len(questions):
#             self.answers = {}
#             self.time_left = 15  # –£–≤–µ–ª–∏—á–∏–º –≤—Ä–µ–º—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
#             self.timer_active = True
#             self.question_start_time = time.time()
#
#             question_data = questions[self.current_question_index]
#
#             socketio.emit('new_question', {
#                 'question_id': question_data['id'],
#                 'question': question_data['question'],
#                 'options': question_data['options'],
#                 'question_number': self.current_question_index + 1,
#                 'total_questions': len(questions),
#                 'time_left': self.time_left
#             })
#
#             print(f"üöÄ –í–æ–ø—Ä–æ—Å {self.current_question_index + 1} –Ω–∞—á–∞—Ç: {question_data['question']}")
#             self.start_timer()
#
#     def start_timer(self):
#         def countdown():
#             for i in range(self.time_left, -1, -1):
#                 if not self.timer_active:
#                     break
#                 self.time_left = i
#                 socketio.emit('timer_update', {'time_left': self.time_left})
#                 time.sleep(1)
#
#             if self.timer_active:
#                 print(f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {self.current_question_index + 1}")
#                 self.end_question()
#
#         self.timer_thread = threading.Thread(target=countdown)
#         self.timer_thread.daemon = True
#         self.timer_thread.start()
#
#     def end_question(self):
#         self.timer_active = False
#
#         question = questions[self.current_question_index]
#         correct_answer = question['correct_answer']
#
#         results = {
#             'total_players': len(self.players),
#             'answered_players': len(self.answers),
#             'correct_answers': sum(1 for answer in self.answers.values()
#                                    if answer == correct_answer),
#             'correct_answer': correct_answer,
#             'correct_answer_text': question['options'][correct_answer],
#             'question_number': self.current_question_index + 1
#         }
#
#         print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ–ø—Ä–æ—Å–∞ {self.current_question_index + 1}:")
#         print(f"   –ò–≥—Ä–æ–∫–æ–≤ –æ—Ç–≤–µ—Ç–∏–ª–æ: {len(self.answers)}/{len(self.players)}")
#         print(f"   –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {results['correct_answers']}")
#
#         socketio.emit('question_results', results)
#
#         print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º...")
#         time.sleep(5)
#
#         self.current_question_index += 1
#         if self.current_question_index < len(questions):
#             self.start_question()
#         else:
#             self.end_quiz()
#
#     def end_quiz(self):
#         self.quiz_active = False
#         self.timer_active = False
#
#         rankings = []
#         for player_id, player_data in self.players.items():
#             rankings.append({
#                 'name': player_data['name'],
#                 'score': self.scores.get(player_id, 0),
#                 'correct_answers': player_data.get('correct_answers', 0)
#             })
#
#         rankings.sort(key=lambda x: x['score'], reverse=True)
#
#         final_results = {
#             'rankings': rankings[:10],
#             'winners': rankings[:3] if len(rankings) >= 3 else rankings,
#             'total_players': len(self.players),
#             'total_questions': len(questions)
#         }
#
#         socketio.emit('quiz_finished', final_results)
#
#         print("üéâ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
#         print(f"üìà –£—á–∞—Å—Ç–≤–æ–≤–∞–ª–æ –∏–≥—Ä–æ–∫–æ–≤: {len(self.players)}")
#         print("üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:")
#         for i, winner in enumerate(final_results['winners']):
#             print(f"   {i + 1}. {winner['name']} - {winner['score']} –±–∞–ª–ª–æ–≤")
#
#     def add_player(self, player_id, name):
#         if player_id not in self.players:
#             self.players[player_id] = {
#                 'name': name,
#                 'correct_answers': 0
#             }
#             self.scores[player_id] = 0
#             print(f"üë§ –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫: {name} (–≤—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(self.players)})")
#
#             if len(self.players) == 1 and not self.quiz_active:
#                 print("üëë –ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è - –∑–∞–ø—É—Å–∫–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
#                 threading.Timer(5.0, self.start_quiz).start()
#
#     def submit_answer(self, player_id, question_id, answer_index):
#         if (player_id in self.players and
#                 self.timer_active and
#                 player_id not in self.answers):
#
#             self.answers[player_id] = answer_index
#
#             current_question = questions[self.current_question_index]
#             response_time = time.time() - self.question_start_time
#
#             if answer_index == current_question['correct_answer']:
#                 time_bonus = max(1, 10 - int(response_time))
#                 self.scores[player_id] += time_bonus
#                 self.players[player_id]['correct_answers'] += 1
#                 print(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç {self.players[player_id]['name']} (+{time_bonus} –±–∞–ª–ª–æ–≤)")
#
#
# quiz_manager = QuizManager()
#
#
# @app.route('/')
# def index():
#     return render_template('index.html')
#
#
# @app.route('/admin')
# def admin():
#     return render_template('admin.html')
#
#
# @socketio.on('connect')
# def handle_connect():
#     print(f'üîå –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {request.sid}')
#     emit('connected', {'status': 'ok'})
#
#
# @socketio.on('disconnect')
# def handle_disconnect():
#     print(f'üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ: {request.sid}')
#
#
# @socketio.on('join_quiz')
# def handle_join(data):
#     name = data.get('name', '–ê–Ω–æ–Ω–∏–º').strip()
#     if not name:
#         name = '–ê–Ω–æ–Ω–∏–º'
#
#     quiz_manager.add_player(request.sid, name)
#     emit('joined_success', {'name': name})
#
#     if quiz_manager.quiz_active:
#         quiz_manager.start_question()
#
#
# @socketio.on('submit_answer')
# def handle_answer(data):
#     question_id = data.get('question_id')
#     answer_index = data.get('answer_index')
#
#     quiz_manager.submit_answer(request.sid, question_id, answer_index)
#     emit('answer_received', {'status': 'ok'})
#
#
# @socketio.on('start_quiz')
# def handle_start():
#     quiz_manager.start_quiz()
#     print('üé¨ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–∞—á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!')
#
#
# @socketio.on('force_next_question')
# def handle_force_next():
#     if quiz_manager.quiz_active:
#         print('‚è≠Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É')
#         quiz_manager.timer_active = False
#         threading.Timer(0.1, quiz_manager.end_question).start()
#
#
# def get_local_ip():
#     try:
#         with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
#             s.connect(("8.8.8.8", 80))
#             return s.getsockname()[0]
#     except:
#         return "127.0.0.1"
#
#
# def install_and_start_localtunnel(port):
#     """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç localtunnel"""
#     try:
#         print("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è localtunnel...")
#
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ localtunnel
#         result = subprocess.run(['npx', '--version'], capture_output=True, text=True)
#         if result.returncode != 0:
#             print("‚ùå npx –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Node.js —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –≤–∞—à–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ.")
#             print("   –°–∫–∞—á–∞–π—Ç–µ —Å: https://nodejs.org/")
#             return None
#
#         print("üåê –ó–∞–ø—É—Å–∫ localtunnel...")
#
#         # –ó–∞–ø—É—Å–∫–∞–µ–º localtunnel
#         process = subprocess.Popen(
#             ['npx', 'localtunnel', '--port', str(port)],
#             stdout=subprocess.PIPE,
#             stderr=subprocess.PIPE,
#             text=True,
#             bufsize=1
#         )
#
#         # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –∏ –ø–æ–ª—É—á–∞–µ–º URL
#         print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ localtunnel...")
#         lt_url = None
#
#         for i in range(15):
#             time.sleep(1)
#
#             try:
#                 line = process.stdout.readline()
#                 if line:
#                     line = line.strip()
#                     print(f"   Localtunnel: {line}")
#
#                     # –ò—â–µ–º URL –≤ –≤—ã–≤–æ–¥–µ
#                     if 'your url is:' in line.lower():
#                         lt_url = line.split('your url is:')[-1].strip()
#                         print(f"‚úÖ Localtunnel URL: {lt_url}")
#                         break
#                     elif 'https://' in line and '.loca.lt' in line:
#                         lt_url = line.strip()
#                         print(f"‚úÖ Localtunnel URL: {lt_url}")
#                         break
#             except:
#                 pass
#
#             if i % 5 == 0 and i > 0:
#                 print(f"   ...–æ–∂–∏–¥–∞–Ω–∏–µ ({i}/15 —Å–µ–∫—É–Ω–¥)")
#
#         if lt_url:
#             return lt_url, process
#         else:
#             print("‚ö†Ô∏è Localtunnel –∑–∞–ø—É—â–µ–Ω, –Ω–æ URL –Ω–µ –ø–æ–ª—É—á–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
#             return None, process
#
#     except Exception as e:
#         print(f"‚ùå –û—à–∏–±–∫–∞ localtunnel: {e}")
#         return None, None
#
#
# def manual_localtunnel_instructions(port):
#     """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ localtunnel"""
#     print(f"\nüîß –î–õ–Ø –í–ù–ï–®–ù–ï–ì–û –î–û–°–¢–£–ü–ê (Localtunnel):")
#     print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Node.js")
#     print("2. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏")
#     print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:")
#     print(f"   npx localtunnel --port {port}")
#     print("4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ URL —Å .loca.lt –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–≥—Ä–æ–∫–∞–º")
#
#
# if __name__ == '__main__':
#     port = 8080
#     local_ip = get_local_ip()
#
#     print("=" * 70)
#     print("üéØ –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê –í–ò–ö–¢–û–†–ò–ù–´ –° LOCALTUNNEL")
#     print("=" * 70)
#
#     # –ü—Ä–æ–±—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ localtunnel
#     print("üåê –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ Localtunnel...")
#     lt_result = install_and_start_localtunnel(port)
#     lt_url, lt_process = lt_result if lt_result else (None, None)
#
#     print("")
#     if lt_url:
#         print("üåê –î–û–°–¢–£–ü –ò–ó –õ–Æ–ë–û–ô –°–ï–¢–ò –ò–ù–¢–ï–†–ù–ï–¢:")
#         print(f"   üì± –î–õ–Ø –ò–ì–†–û–ö–û–í: {lt_url}")
#         print(f"   ‚öôÔ∏è  –î–õ–Ø –ê–î–ú–ò–ù–ê: {lt_url}/admin")
#         print("=" * 70)
#         print("üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –∏–≥—Ä–æ–∫–∞–º!")
#         print("   –†–∞–±–æ—Ç–∞–µ—Ç –∏–∑ –ª—é–±–æ–π —Ç–æ—á–∫–∏ –º–∏—Ä–∞ üåç")
#         print("=" * 70)
#         print("‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: Localtunnel —Ç—É–Ω–Ω–µ–ª—å –∑–∞–∫—Ä–æ–µ—Ç—Å—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
#     else:
#         print("üìç –õ–û–ö–ê–õ–¨–ù–´–ô –î–û–°–¢–£–ü (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≤–∞—à–µ–π Wi-Fi —Å–µ—Ç–∏):")
#         print(f"   üì± http://{local_ip}:{port}")
#         print("")
#         print("üåê –î–õ–Ø –î–û–°–¢–£–ü–ê –ò–ó –ò–ù–¢–ï–†–ù–ï–¢–ê:")
#         manual_localtunnel_instructions(port)
#
#     print("")
#     print("‚öôÔ∏è  –ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø:")
#     print(f"   http://localhost:{port}/admin")
#     print("=" * 70)
#     print("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...")
#     print("=" * 70)
#
#     try:
#         socketio.run(
#             app,
#             host='0.0.0.0',
#             port=port,
#             debug=True,
#             allow_unsafe_werkzeug=True
#         )
#     except Exception as e:
#         print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
#     finally:
#         # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å localtunnel –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
#         if lt_process:
#             lt_process.terminate()
#             print("üîí Localtunnel —Ç—É–Ω–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç")

from flask import Flask, render_template, request
from flask_socketio import SocketIO, emit
import time
import threading
import os

app = Flask(__name__)
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'quiz_secret_key_2024')

# –ò—Å–ø–æ–ª—å–∑—É–µ–º threading –≤–º–µ—Å—Ç–æ eventlet –¥–ª—è Render
socketio = SocketIO(app, cors_allowed_origins="*", async_mode='threading')

# –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
questions = [
    {
        'id': 1,
        'question': '–°—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?',
        'options': ['–õ–æ–Ω–¥–æ–Ω', '–ü–∞—Ä–∏–∂', '–ë–µ—Ä–ª–∏–Ω', '–ú–∞–¥—Ä–∏–¥'],
        'correct_answer': 1
    },
    {
        'id': 2,
        'question': '2 + 2 = ?',
        'options': ['3', '4', '5', '6'],
        'correct_answer': 1
    },
    {
        'id': 3,
        'question': '–°–∞–º–∞—è –±–æ–ª—å—à–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã?',
        'options': ['–ó–µ–º–ª—è', '–Æ–ø–∏—Ç–µ—Ä', '–°–∞—Ç—É—Ä–Ω', '–ú–∞—Ä—Å'],
        'correct_answer': 1
    },
    {
        'id': 4,
        'question': '–ê–≤—Ç–æ—Ä "–í–æ–π–Ω—ã –∏ –º–∏—Ä–∞"?',
        'options': ['–î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π', '–¢–æ–ª—Å—Ç–æ–π', '–ß–µ—Ö–æ–≤', '–¢—É—Ä–≥–µ–Ω–µ–≤'],
        'correct_answer': 1
    },
    {
        'id': 5,
        'question': '–•–∏–º–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞ –≤–æ–¥—ã?',
        'options': ['CO2', 'H2O', 'O2', 'NaCl'],
        'correct_answer': 1
    }
]


class QuizManager:
    def __init__(self):
        self.current_question_index = 0
        self.quiz_active = False
        self.time_left = 30
        self.timer_thread = None
        self.players = {}
        self.scores = {}
        self.answers = {}
        self.timer_active = False
        self.question_start_time = None

    def start_quiz(self):
        if not self.quiz_active:
            self.quiz_active = True
            self.current_question_index = 0
            self.players = {}
            self.scores = {}
            self.answers = {}
            print("üé¨ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ—Ç –í–µ—Ä–æ–Ω–∏–∫–∞ –Ω–∞—á–∞—Ç–∞!")
            socketio.emit('quiz_started', broadcast=True)
            self.start_question()

    def start_question(self):
        if self.current_question_index < len(questions):
            self.answers = {}
            self.time_left = 15
            self.timer_active = True
            self.question_start_time = time.time()

            question_data = questions[self.current_question_index]

            socketio.emit('new_question', {
                'question_id': question_data['id'],
                'question': question_data['question'],
                'options': question_data['options'],
                'question_number': self.current_question_index + 1,
                'total_questions': len(questions),
                'time_left': self.time_left
            })

            print(f"üöÄ –í–æ–ø—Ä–æ—Å {self.current_question_index + 1} –Ω–∞—á–∞—Ç: {question_data['question']}")
            self.start_timer()

    def start_timer(self):
        def countdown():
            for i in range(self.time_left, -1, -1):
                if not self.timer_active:
                    break
                self.time_left = i
                socketio.emit('timer_update', {'time_left': self.time_left})
                time.sleep(1)

            if self.timer_active:
                print(f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {self.current_question_index + 1}")
                self.end_question()

        self.timer_thread = threading.Thread(target=countdown)
        self.timer_thread.daemon = True
        self.timer_thread.start()

    def end_question(self):
        self.timer_active = False

        question = questions[self.current_question_index]
        correct_answer = question['correct_answer']

        results = {
            'total_players': len(self.players),
            'answered_players': len(self.answers),
            'correct_answers': sum(1 for answer in self.answers.values()
                                   if answer == correct_answer),
            'correct_answer': correct_answer,
            'correct_answer_text': question['options'][correct_answer],
            'question_number': self.current_question_index + 1
        }

        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ–ø—Ä–æ—Å–∞ {self.current_question_index + 1}:")
        print(f"   –ò–≥—Ä–æ–∫–æ–≤ –æ—Ç–≤–µ—Ç–∏–ª–æ: {len(self.answers)}/{len(self.players)}")
        print(f"   –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {results['correct_answers']}")

        socketio.emit('question_results', results)

        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º...")
        time.sleep(5)

        self.current_question_index += 1
        if self.current_question_index < len(questions):
            self.start_question()
        else:
            self.end_quiz()

    def end_quiz(self):
        self.quiz_active = False
        self.timer_active = False

        rankings = []
        for player_id, player_data in self.players.items():
            rankings.append({
                'name': player_data['name'],
                'score': self.scores.get(player_id, 0),
                'correct_answers': player_data.get('correct_answers', 0)
            })

        rankings.sort(key=lambda x: x['score'], reverse=True)

        final_results = {
            'rankings': rankings[:10],
            'winners': rankings[:3] if len(rankings) >= 3 else rankings,
            'total_players': len(self.players),
            'total_questions': len(questions)
        }

        socketio.emit('quiz_finished', final_results)

        print("üéâ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìà –£—á–∞—Å—Ç–≤–æ–≤–∞–ª–æ –∏–≥—Ä–æ–∫–æ–≤: {len(self.players)}")
        print("üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:")
        for i, winner in enumerate(final_results['winners']):
            print(f"   {i + 1}. {winner['name']} - {winner['score']} –±–∞–ª–ª–æ–≤")

    def add_player(self, player_id, name):
        if player_id not in self.players:
            self.players[player_id] = {
                'name': name,
                'correct_answers': 0
            }
            self.scores[player_id] = 0
            print(f"üë§ –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫: {name} (–≤—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(self.players)})")

            if len(self.players) == 1 and not self.quiz_active:
                print("üëë –ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è - –∑–∞–ø—É—Å–∫–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                threading.Timer(5.0, self.start_quiz).start()

    def submit_answer(self, player_id, question_id, answer_index):
        if (player_id in self.players and
                self.timer_active and
                player_id not in self.answers):

            self.answers[player_id] = answer_index

            current_question = questions[self.current_question_index]
            response_time = time.time() - self.question_start_time

            if answer_index == current_question['correct_answer']:
                time_bonus = max(1, 10 - int(response_time))
                self.scores[player_id] += time_bonus
                self.players[player_id]['correct_answers'] += 1
                print(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç {self.players[player_id]['name']} (+{time_bonus} –±–∞–ª–ª–æ–≤)")


quiz_manager = QuizManager()


@app.route('/')
def index():
    return render_template('index.html')


@app.route('/admin')
def admin():
    return render_template('admin.html')


@socketio.on('connect')
def handle_connect():
    print(f'üîå –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {request.sid}')
    emit('connected', {'status': 'ok'})


@socketio.on('disconnect')
def handle_disconnect():
    print(f'üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ: {request.sid}')


@socketio.on('join_quiz')
def handle_join(data):
    name = data.get('name', '–ê–Ω–æ–Ω–∏–º').strip()
    if not name:
        name = '–ê–Ω–æ–Ω–∏–º'

    quiz_manager.add_player(request.sid, name)
    emit('joined_success', {'name': name})

    if quiz_manager.quiz_active:
        quiz_manager.start_question()


@socketio.on('submit_answer')
def handle_answer(data):
    question_id = data.get('question_id')
    answer_index = data.get('answer_index')

    quiz_manager.submit_answer(request.sid, question_id, answer_index)
    emit('answer_received', {'status': 'ok'})


@socketio.on('start_quiz')
def handle_start():
    quiz_manager.start_quiz()
    print('üé¨ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–∞—á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!')


@socketio.on('force_next_question')
def handle_force_next():
    if quiz_manager.quiz_active:
        print('‚è≠Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É')
        quiz_manager.timer_active = False
        threading.Timer(0.1, quiz_manager.end_question).start()


if __name__ == '__main__':
    port = int(os.environ.get('PORT', 8080))
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    socketio.run(
        app,
        host='0.0.0.0',
        port=port,
        debug=False,
        allow_unsafe_werkzeug=True
    )

